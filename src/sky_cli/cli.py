import platform
import subprocess
import sys
from pathlib import Path

import click

POWERSHELL_SCRIPT_CONTENT = r"""
# ===================================================================
# ==  Robust NoneBot Guardian & Restarter for Windows (v2.0)       ==
# ==  - Auto-detects virtual environments.                         ==
# ==  - Falls back to system-level commands.                       ==
# ===================================================================

$ScriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Definition
Set-Location -Path $ScriptRoot

# 在当前目录下查找一个有效的 Python 虚拟环境
# 如果找到，返回 python.exe 的完整路径,否则返回 $null。
function Find-LocalPython {
    $subdirectories = Get-ChildItem -Path $ScriptRoot -Directory
    
    foreach ($dir in $subdirectories) {
        $potentialPath = Join-Path -Path $dir.FullName -ChildPath "Scripts\python.exe"
        if (Test-Path -Path $potentialPath -PathType Leaf) {
            return $potentialPath
        }
    }
    
    return $null
}

$CommandToRun = $null
$CommandArgs = $null

$localPythonPath = Find-LocalPython

if ($localPythonPath) {
    Write-Host "√ Automatically detected Python virtual environment at '$localPythonPath'" -ForegroundColor Green
    $CommandToRun = $localPythonPath
    $CommandArgs = "-m", "nb_cli", "run"
}

elseif (Get-Command "nb.exe" -ErrorAction SilentlyContinue) {
    Write-Host "No local virtual environment found. Falling back to system-level 'nb.exe' command." -ForegroundColor Cyan
    $CommandToRun = "nb.exe"
    $CommandArgs = "run"
}
else {
    Write-Host "× Error: Could not find a local virtual environment (e.g., '.\.venv\Scripts\python.exe') or a system-level 'nb.exe' command in your PATH." -ForegroundColor Red
    Write-Host "Please ensure NoneBot is installed correctly either in a local venv or globally." -ForegroundColor Red
    Read-Host "Press Enter to exit"
    exit 1
}

# 进程守护循环
while ($true) {
    Write-Host ""
    Write-Host "($(Get-Date -Format 'HH:mm:ss')) Starting NoneBot process..." -ForegroundColor White

    try {
        $process = Start-Process -FilePath $CommandToRun -ArgumentList $CommandArgs -NoNewWindow -Wait -PassThru
        $ExitCode = $process.ExitCode
    } catch {
        Write-Host "Failed to start process with command: '$CommandToRun'" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
        $ExitCode = -1
    }

    if ($ExitCode -eq -1073741510) {
        Write-Host ""
        Write-Host "($(Get-Date -Format 'HH:mm:ss')) Process was interrupted by user (Ctrl+C). Not restarting." -ForegroundColor Green
        break
    } else {
        # 退出码为 0 或其他错误码都进行重启
        Write-Host ""
        Write-Host "($(Get-Date -Format 'HH:mm:ss')) Process exited with code ($ExitCode). Restarting in 5 seconds..." -ForegroundColor Yellow
        Start-Sleep -Seconds 5
    }
}

Write-Host ""
Write-Host "Script has finished." -ForegroundColor Green
Read-Host "Press Enter to exit."
"""

BASH_SCRIPT_CONTENT = r"""
#!/bin/bash

# =======================================================
# ==      NoneBot Guardian & Restarter for Linux/macOS    ==
# ==      (Generated by nonebot-plugin-sky)              ==
# =======================================================

cd "$(dirname "$0")" || exit

# 在当前目录下查找一个有效的 Python 虚拟环境
# 如果找到，打印出 python 可执行文件的路径并返回 0；否则返回 1。
find_local_python() {
  for dir in */ .*/ ; do
    if [ -d "$dir" ] && [ "$dir" != "./" ] && [ "$dir" != "../" ]; then
      local potential_python="$dir/bin/python"
      if [ -f "$potential_python" ]; then
        echo "$potential_python"
        return 0
      fi
    fi
  done
  return 1
}

RUN_CMD=""

VENV_PYTHON=$(find_local_python)

if [ $? -eq 0 ]; then
    echo "✅ Automatically detected Python virtual environment at './${VENV_PYTHON#./}'"
    RUN_CMD=("$VENV_PYTHON" -m nb_cli run)
# 如果虚拟环境不存在，则检测全局的 'nb' 命令
elif command -v nb >/dev/null 2>&1; then
    echo "ℹ️  No local virtual environment found. Falling back to system-level 'nb' command."
    RUN_CMD=(nb run)
else
    echo "❌ Error: Could not find a local virtual environment (e.g., ./.venv/bin/python) or a system-level 'nb' command in your PATH." >&2
    echo "Please ensure NoneBot is installed correctly either in a local venv or globally." >&2
    exit 1
fi

# 进程守护循环
while true; do
    echo ""
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] Starting NoneBot process..."
    
    "${RUN_CMD[@]}"
    
    EXIT_CODE=$?
    
    if [ $EXIT_CODE -eq 130 ]; then
        echo ""
        echo "[$(date +'%Y-%m-%d %H:%M:%S')] Process was interrupted by user (Ctrl+C). Not restarting."
        break
    else
        echo ""
        echo "[$(date +'%Y-%m-%d %H:%M:%S')] Process exited with code ($EXIT_CODE). Restarting in 5 seconds..."
        sleep 5
    fi
done

echo ""
echo "Script has finished."
"""

# ===================================================================
# ==                     创建新的 CLI 命令                         ==
# ===================================================================


@click.group(invoke_without_command=True)
@click.pass_context
def sky(ctx: click.Context):
    """
    nonebot-plugin-sky 的守护启动器和管理工具。
    直接运行 `sky` 将默认以守护模式启动 NoneBot。
    """
    if ctx.invoked_subcommand is None:
        ctx.invoke(run)

def _install_script():
    """
    为 nonebot-plugin-sky 安装或更新推荐的守护脚本。
    """
    is_windows = platform.system() == "Windows"
    script_name = "run.ps1" if is_windows else "run.sh"
    script_content = POWERSHELL_SCRIPT_CONTENT if is_windows else BASH_SCRIPT_CONTENT
    dest_path = Path.cwd() / script_name

    try:
        dest_path.write_text(script_content, encoding="utf-8")
        if not is_windows:
            dest_path.chmod(0o755)
        click.secho(
            f"守护脚本 '{script_name}'成功生成在项目根目录。",
            fg="green",
        )
    except Exception as e:
        click.secho(f"创建脚本时发生错误: {e}", fg="red")


@sky.command(name="run", help="使用守护脚本启动 NoneBot (如果脚本不存在则会自动创建)。")
@click.pass_context
def run(ctx: click.Context):
    """
    使用守护脚本启动 NoneBot
    如果守护脚本不存在则自动创建
    """
    is_windows = platform.system() == "Windows"
    script_name = "run.ps1" if is_windows else "run.sh"
    dest_path = Path.cwd() / script_name

    if not dest_path.exists():
        ctx.invoke(_install_script)
        if not dest_path.exists():
            click.secho("脚本创建失败，无法继续启动。", fg="red")
            sys.exit(1)
        click.echo("-" * 20)

    click.secho(f"正在通过 '{script_name}' 启动 NoneBot...", fg="cyan")

    try:
        if is_windows:
            subprocess.run(
                [
                    "powershell.exe",
                    "-ExecutionPolicy",
                    "Bypass",
                    "-File",
                    str(dest_path),
                ],
                check=True,
            )
        else:
            # 在 Linux/macOS 上，直接执行
            subprocess.run(["./" + script_name], check=True)
    except FileNotFoundError:
        click.secho(
            f"错误: 无法执行脚本。请确保您的系统中有 '{'powershell.exe' if is_windows else 'bash'}'。",
            fg="red",
        )
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        click.secho(f"脚本已退出，退出码: {e.returncode}", fg="yellow")
    except Exception as e:
        click.secho(f"运行脚本时发生未知错误: {e}", fg="red")
